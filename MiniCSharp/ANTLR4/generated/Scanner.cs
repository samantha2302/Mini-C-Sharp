//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/playa/Desktop/Proyecto 2/Mini-C-Sharp/MiniCSharp/ANTLR4\Scanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Scanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, USING=14, PLUS=15, MINUS=16, MULT=17, 
		DIV=18, MOD=19, ASSIGN=20, LPAREN=21, RPAREN=22, LBRACE=23, RBRACE=24, 
		LBRACK=25, RBRACK=26, SEMICOLON=27, COMMA=28, INCREMENT=29, DECREMENT=30, 
		LOGICAL_OR=31, LOGICAL_AND=32, EQUALS=33, NOT_EQUALS=34, GREATER_THAN=35, 
		GREATER_EQUALS=36, LESS_THAN=37, LESS_EQUALS=38, DOT=39, IDENTIFIER=40, 
		NUMBER=41, DOUBLE_CONST=42, CHAR_CONSTANT=43, STRING_CONSTANT=44, COMMENT=45, 
		BLOCK_COMMENT=46, WHITESPACE=47;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "USING", "PLUS", "MINUS", "MULT", "DIV", 
		"MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMICOLON", "COMMA", "INCREMENT", "DECREMENT", "LOGICAL_OR", "LOGICAL_AND", 
		"EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_EQUALS", "LESS_THAN", 
		"LESS_EQUALS", "DOT", "IDENTIFIER", "LETTER", "DIGIT", "NUMBER", "DOUBLE_CONST", 
		"CHAR_CONSTANT", "STRING_CONSTANT", "ESCAPE_SEQUENCE", "COMMENT", "BLOCK_COMMENT", 
		"WHITESPACE"
	};


				    public override void NotifyListeners(LexerNoViableAltException e){
				    this.ErrorListenerDispatch.SyntaxError(this.ErrorOutput, (IRecognizer) this, 0, TokenStartLine, this.TokenStartColumn, "reconocimiento de token : '" + this.GetErrorDisplay(this.EmitEOF().InputStream.GetText(Interval.Of(this.TokenStartCharIndex, this.InputStream.Index)))  + "'", (RecognitionException) e);
				   }


	public Scanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Scanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'using'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "';'", "','", "'++'", "'--'", "'||'", "'&&'", "'=='", "'!='", 
		"'>'", "'>='", "'<'", "'<='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "USING", "PLUS", "MINUS", "MULT", 
		"DIV", "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA", "INCREMENT", "DECREMENT", "LOGICAL_OR", 
		"LOGICAL_AND", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_EQUALS", 
		"LESS_THAN", "LESS_EQUALS", "DOT", "IDENTIFIER", "NUMBER", "DOUBLE_CONST", 
		"CHAR_CONSTANT", "STRING_CONSTANT", "COMMENT", "BLOCK_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Scanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Scanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,47,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
		1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
		1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
		1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,5,39,
		237,8,39,10,39,12,39,240,9,39,1,40,1,40,1,41,4,41,245,8,41,11,41,12,41,
		246,1,42,4,42,250,8,42,11,42,12,42,251,1,43,1,43,1,43,1,43,1,44,1,44,1,
		44,3,44,261,8,44,1,44,1,44,1,45,1,45,1,45,5,45,268,8,45,10,45,12,45,271,
		9,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,282,8,47,10,47,
		12,47,285,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,293,8,48,10,48,12,48,
		296,9,48,1,48,1,48,1,48,1,48,1,48,1,49,4,49,304,8,49,11,49,12,49,305,1,
		49,1,49,1,294,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
		71,36,73,37,75,38,77,39,79,40,81,0,83,0,85,41,87,42,89,43,91,44,93,0,95,
		45,97,46,99,47,1,0,7,3,0,65,90,95,95,97,122,1,0,48,57,2,0,39,39,92,92,
		2,0,34,34,92,92,5,0,39,39,92,92,110,110,114,114,116,116,2,0,10,10,13,13,
		3,0,9,10,13,13,32,32,315,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,
		0,0,3,107,1,0,0,0,5,112,1,0,0,0,7,115,1,0,0,0,9,120,1,0,0,0,11,124,1,0,
		0,0,13,130,1,0,0,0,15,136,1,0,0,0,17,143,1,0,0,0,19,148,1,0,0,0,21,154,
		1,0,0,0,23,158,1,0,0,0,25,163,1,0,0,0,27,169,1,0,0,0,29,175,1,0,0,0,31,
		177,1,0,0,0,33,179,1,0,0,0,35,181,1,0,0,0,37,183,1,0,0,0,39,185,1,0,0,
		0,41,187,1,0,0,0,43,189,1,0,0,0,45,191,1,0,0,0,47,193,1,0,0,0,49,195,1,
		0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,55,201,1,0,0,0,57,203,1,0,0,0,59,206,
		1,0,0,0,61,209,1,0,0,0,63,212,1,0,0,0,65,215,1,0,0,0,67,218,1,0,0,0,69,
		221,1,0,0,0,71,223,1,0,0,0,73,226,1,0,0,0,75,228,1,0,0,0,77,231,1,0,0,
		0,79,233,1,0,0,0,81,241,1,0,0,0,83,244,1,0,0,0,85,249,1,0,0,0,87,253,1,
		0,0,0,89,257,1,0,0,0,91,264,1,0,0,0,93,274,1,0,0,0,95,277,1,0,0,0,97,288,
		1,0,0,0,99,303,1,0,0,0,101,102,5,99,0,0,102,103,5,108,0,0,103,104,5,97,
		0,0,104,105,5,115,0,0,105,106,5,115,0,0,106,2,1,0,0,0,107,108,5,118,0,
		0,108,109,5,111,0,0,109,110,5,105,0,0,110,111,5,100,0,0,111,4,1,0,0,0,
		112,113,5,105,0,0,113,114,5,102,0,0,114,6,1,0,0,0,115,116,5,101,0,0,116,
		117,5,108,0,0,117,118,5,115,0,0,118,119,5,101,0,0,119,8,1,0,0,0,120,121,
		5,102,0,0,121,122,5,111,0,0,122,123,5,114,0,0,123,10,1,0,0,0,124,125,5,
		119,0,0,125,126,5,104,0,0,126,127,5,105,0,0,127,128,5,108,0,0,128,129,
		5,101,0,0,129,12,1,0,0,0,130,131,5,98,0,0,131,132,5,114,0,0,132,133,5,
		101,0,0,133,134,5,97,0,0,134,135,5,107,0,0,135,14,1,0,0,0,136,137,5,114,
		0,0,137,138,5,101,0,0,138,139,5,116,0,0,139,140,5,117,0,0,140,141,5,114,
		0,0,141,142,5,110,0,0,142,16,1,0,0,0,143,144,5,114,0,0,144,145,5,101,0,
		0,145,146,5,97,0,0,146,147,5,100,0,0,147,18,1,0,0,0,148,149,5,119,0,0,
		149,150,5,114,0,0,150,151,5,105,0,0,151,152,5,116,0,0,152,153,5,101,0,
		0,153,20,1,0,0,0,154,155,5,110,0,0,155,156,5,101,0,0,156,157,5,119,0,0,
		157,22,1,0,0,0,158,159,5,116,0,0,159,160,5,114,0,0,160,161,5,117,0,0,161,
		162,5,101,0,0,162,24,1,0,0,0,163,164,5,102,0,0,164,165,5,97,0,0,165,166,
		5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,26,1,0,0,0,169,170,5,
		117,0,0,170,171,5,115,0,0,171,172,5,105,0,0,172,173,5,110,0,0,173,174,
		5,103,0,0,174,28,1,0,0,0,175,176,5,43,0,0,176,30,1,0,0,0,177,178,5,45,
		0,0,178,32,1,0,0,0,179,180,5,42,0,0,180,34,1,0,0,0,181,182,5,47,0,0,182,
		36,1,0,0,0,183,184,5,37,0,0,184,38,1,0,0,0,185,186,5,61,0,0,186,40,1,0,
		0,0,187,188,5,40,0,0,188,42,1,0,0,0,189,190,5,41,0,0,190,44,1,0,0,0,191,
		192,5,123,0,0,192,46,1,0,0,0,193,194,5,125,0,0,194,48,1,0,0,0,195,196,
		5,91,0,0,196,50,1,0,0,0,197,198,5,93,0,0,198,52,1,0,0,0,199,200,5,59,0,
		0,200,54,1,0,0,0,201,202,5,44,0,0,202,56,1,0,0,0,203,204,5,43,0,0,204,
		205,5,43,0,0,205,58,1,0,0,0,206,207,5,45,0,0,207,208,5,45,0,0,208,60,1,
		0,0,0,209,210,5,124,0,0,210,211,5,124,0,0,211,62,1,0,0,0,212,213,5,38,
		0,0,213,214,5,38,0,0,214,64,1,0,0,0,215,216,5,61,0,0,216,217,5,61,0,0,
		217,66,1,0,0,0,218,219,5,33,0,0,219,220,5,61,0,0,220,68,1,0,0,0,221,222,
		5,62,0,0,222,70,1,0,0,0,223,224,5,62,0,0,224,225,5,61,0,0,225,72,1,0,0,
		0,226,227,5,60,0,0,227,74,1,0,0,0,228,229,5,60,0,0,229,230,5,61,0,0,230,
		76,1,0,0,0,231,232,5,46,0,0,232,78,1,0,0,0,233,238,3,81,40,0,234,237,3,
		81,40,0,235,237,3,83,41,0,236,234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,
		0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,80,1,0,0,0,240,238,1,0,0,0,241,
		242,7,0,0,0,242,82,1,0,0,0,243,245,7,1,0,0,244,243,1,0,0,0,245,246,1,0,
		0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,84,1,0,0,0,248,250,7,1,0,0,249,
		248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,86,1,0,
		0,0,253,254,3,85,42,0,254,255,3,77,38,0,255,256,3,85,42,0,256,88,1,0,0,
		0,257,260,5,39,0,0,258,261,3,93,46,0,259,261,8,2,0,0,260,258,1,0,0,0,260,
		259,1,0,0,0,261,262,1,0,0,0,262,263,5,39,0,0,263,90,1,0,0,0,264,269,5,
		34,0,0,265,268,3,93,46,0,266,268,8,3,0,0,267,265,1,0,0,0,267,266,1,0,0,
		0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,
		269,1,0,0,0,272,273,5,34,0,0,273,92,1,0,0,0,274,275,5,92,0,0,275,276,7,
		4,0,0,276,94,1,0,0,0,277,278,5,47,0,0,278,279,5,47,0,0,279,283,1,0,0,0,
		280,282,8,5,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,
		1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,6,47,0,0,287,96,1,0,0,
		0,288,289,5,47,0,0,289,290,5,42,0,0,290,294,1,0,0,0,291,293,9,0,0,0,292,
		291,1,0,0,0,293,296,1,0,0,0,294,295,1,0,0,0,294,292,1,0,0,0,295,297,1,
		0,0,0,296,294,1,0,0,0,297,298,5,42,0,0,298,299,5,47,0,0,299,300,1,0,0,
		0,300,301,6,48,0,0,301,98,1,0,0,0,302,304,7,6,0,0,303,302,1,0,0,0,304,
		305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,6,
		49,0,0,308,100,1,0,0,0,11,0,236,238,246,251,260,267,269,283,294,305,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
