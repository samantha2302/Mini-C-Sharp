//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/playa/Desktop/Proyecto 3/Mini-C-Sharp/MiniCSharp/ANTLR4\Scanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Scanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, USING=14, QMARK=15, PLUS=16, MINUS=17, 
		MULT=18, DIV=19, MOD=20, ASSIGN=21, LPAREN=22, RPAREN=23, LBRACE=24, RBRACE=25, 
		LBRACK=26, RBRACK=27, SEMICOLON=28, COMMA=29, INCREMENT=30, DECREMENT=31, 
		LOGICAL_OR=32, LOGICAL_AND=33, EQUALS=34, NOT_EQUALS=35, GREATER_THAN=36, 
		GREATER_EQUALS=37, LESS_THAN=38, LESS_EQUALS=39, DOT=40, IDENTIFIER=41, 
		NUMBER=42, DOUBLE_CONST=43, CHAR_CONSTANT=44, STRING_CONSTANT=45, COMMENT=46, 
		BLOCK_COMMENT=47, WHITESPACE=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "USING", "QMARK", "PLUS", "MINUS", "MULT", 
		"DIV", "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA", "INCREMENT", "DECREMENT", "LOGICAL_OR", 
		"LOGICAL_AND", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_EQUALS", 
		"LESS_THAN", "LESS_EQUALS", "DOT", "IDENTIFIER", "LETTER", "DIGIT", "NUMBER", 
		"DOUBLE_CONST", "CHAR_CONSTANT", "STRING_CONSTANT", "ESCAPE_SEQUENCE", 
		"COMMENT", "BLOCK_COMMENT", "WHITESPACE"
	};


				    public override void NotifyListeners(LexerNoViableAltException e){
				    this.ErrorListenerDispatch.SyntaxError(this.ErrorOutput, (IRecognizer) this, 0, TokenStartLine, this.TokenStartColumn, "reconocimiento de token : '" + this.GetErrorDisplay(this.EmitEOF().InputStream.GetText(Interval.Of(this.TokenStartCharIndex, this.InputStream.Index)))  + "'", (RecognitionException) e);
				   }


	public Scanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Scanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'using'", 
		"'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'++'", "'--'", "'||'", "'&&'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "USING", "QMARK", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMICOLON", "COMMA", "INCREMENT", "DECREMENT", "LOGICAL_OR", 
		"LOGICAL_AND", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_EQUALS", 
		"LESS_THAN", "LESS_EQUALS", "DOT", "IDENTIFIER", "NUMBER", "DOUBLE_CONST", 
		"CHAR_CONSTANT", "STRING_CONSTANT", "COMMENT", "BLOCK_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Scanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Scanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
		1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
		1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,
		1,40,1,40,1,40,5,40,241,8,40,10,40,12,40,244,9,40,1,41,1,41,1,42,4,42,
		249,8,42,11,42,12,42,250,1,43,4,43,254,8,43,11,43,12,43,255,1,44,1,44,
		1,44,1,44,1,45,1,45,1,45,3,45,265,8,45,1,45,1,45,1,46,1,46,1,46,5,46,272,
		8,46,10,46,12,46,275,9,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
		5,48,286,8,48,10,48,12,48,289,9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,
		297,8,49,10,49,12,49,300,9,49,1,49,1,49,1,49,1,49,1,49,1,50,4,50,308,8,
		50,11,50,12,50,309,1,50,1,50,1,298,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,0,
		87,42,89,43,91,44,93,45,95,0,97,46,99,47,101,48,1,0,7,3,0,65,90,95,95,
		97,122,1,0,48,57,2,0,39,39,92,92,2,0,34,34,92,92,5,0,39,39,92,92,110,110,
		114,114,116,116,2,0,10,10,13,13,3,0,9,10,13,13,32,32,319,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,109,1,0,0,0,5,114,1,
		0,0,0,7,117,1,0,0,0,9,122,1,0,0,0,11,126,1,0,0,0,13,132,1,0,0,0,15,138,
		1,0,0,0,17,145,1,0,0,0,19,150,1,0,0,0,21,156,1,0,0,0,23,160,1,0,0,0,25,
		165,1,0,0,0,27,171,1,0,0,0,29,177,1,0,0,0,31,179,1,0,0,0,33,181,1,0,0,
		0,35,183,1,0,0,0,37,185,1,0,0,0,39,187,1,0,0,0,41,189,1,0,0,0,43,191,1,
		0,0,0,45,193,1,0,0,0,47,195,1,0,0,0,49,197,1,0,0,0,51,199,1,0,0,0,53,201,
		1,0,0,0,55,203,1,0,0,0,57,205,1,0,0,0,59,207,1,0,0,0,61,210,1,0,0,0,63,
		213,1,0,0,0,65,216,1,0,0,0,67,219,1,0,0,0,69,222,1,0,0,0,71,225,1,0,0,
		0,73,227,1,0,0,0,75,230,1,0,0,0,77,232,1,0,0,0,79,235,1,0,0,0,81,237,1,
		0,0,0,83,245,1,0,0,0,85,248,1,0,0,0,87,253,1,0,0,0,89,257,1,0,0,0,91,261,
		1,0,0,0,93,268,1,0,0,0,95,278,1,0,0,0,97,281,1,0,0,0,99,292,1,0,0,0,101,
		307,1,0,0,0,103,104,5,99,0,0,104,105,5,108,0,0,105,106,5,97,0,0,106,107,
		5,115,0,0,107,108,5,115,0,0,108,2,1,0,0,0,109,110,5,118,0,0,110,111,5,
		111,0,0,111,112,5,105,0,0,112,113,5,100,0,0,113,4,1,0,0,0,114,115,5,105,
		0,0,115,116,5,102,0,0,116,6,1,0,0,0,117,118,5,101,0,0,118,119,5,108,0,
		0,119,120,5,115,0,0,120,121,5,101,0,0,121,8,1,0,0,0,122,123,5,102,0,0,
		123,124,5,111,0,0,124,125,5,114,0,0,125,10,1,0,0,0,126,127,5,119,0,0,127,
		128,5,104,0,0,128,129,5,105,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,
		12,1,0,0,0,132,133,5,98,0,0,133,134,5,114,0,0,134,135,5,101,0,0,135,136,
		5,97,0,0,136,137,5,107,0,0,137,14,1,0,0,0,138,139,5,114,0,0,139,140,5,
		101,0,0,140,141,5,116,0,0,141,142,5,117,0,0,142,143,5,114,0,0,143,144,
		5,110,0,0,144,16,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,
		97,0,0,148,149,5,100,0,0,149,18,1,0,0,0,150,151,5,119,0,0,151,152,5,114,
		0,0,152,153,5,105,0,0,153,154,5,116,0,0,154,155,5,101,0,0,155,20,1,0,0,
		0,156,157,5,110,0,0,157,158,5,101,0,0,158,159,5,119,0,0,159,22,1,0,0,0,
		160,161,5,116,0,0,161,162,5,114,0,0,162,163,5,117,0,0,163,164,5,101,0,
		0,164,24,1,0,0,0,165,166,5,102,0,0,166,167,5,97,0,0,167,168,5,108,0,0,
		168,169,5,115,0,0,169,170,5,101,0,0,170,26,1,0,0,0,171,172,5,117,0,0,172,
		173,5,115,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,176,5,103,0,0,176,
		28,1,0,0,0,177,178,5,63,0,0,178,30,1,0,0,0,179,180,5,43,0,0,180,32,1,0,
		0,0,181,182,5,45,0,0,182,34,1,0,0,0,183,184,5,42,0,0,184,36,1,0,0,0,185,
		186,5,47,0,0,186,38,1,0,0,0,187,188,5,37,0,0,188,40,1,0,0,0,189,190,5,
		61,0,0,190,42,1,0,0,0,191,192,5,40,0,0,192,44,1,0,0,0,193,194,5,41,0,0,
		194,46,1,0,0,0,195,196,5,123,0,0,196,48,1,0,0,0,197,198,5,125,0,0,198,
		50,1,0,0,0,199,200,5,91,0,0,200,52,1,0,0,0,201,202,5,93,0,0,202,54,1,0,
		0,0,203,204,5,59,0,0,204,56,1,0,0,0,205,206,5,44,0,0,206,58,1,0,0,0,207,
		208,5,43,0,0,208,209,5,43,0,0,209,60,1,0,0,0,210,211,5,45,0,0,211,212,
		5,45,0,0,212,62,1,0,0,0,213,214,5,124,0,0,214,215,5,124,0,0,215,64,1,0,
		0,0,216,217,5,38,0,0,217,218,5,38,0,0,218,66,1,0,0,0,219,220,5,61,0,0,
		220,221,5,61,0,0,221,68,1,0,0,0,222,223,5,33,0,0,223,224,5,61,0,0,224,
		70,1,0,0,0,225,226,5,62,0,0,226,72,1,0,0,0,227,228,5,62,0,0,228,229,5,
		61,0,0,229,74,1,0,0,0,230,231,5,60,0,0,231,76,1,0,0,0,232,233,5,60,0,0,
		233,234,5,61,0,0,234,78,1,0,0,0,235,236,5,46,0,0,236,80,1,0,0,0,237,242,
		3,83,41,0,238,241,3,83,41,0,239,241,3,85,42,0,240,238,1,0,0,0,240,239,
		1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,82,1,0,0,0,
		244,242,1,0,0,0,245,246,7,0,0,0,246,84,1,0,0,0,247,249,7,1,0,0,248,247,
		1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,86,1,0,0,0,
		252,254,7,1,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,
		1,0,0,0,256,88,1,0,0,0,257,258,3,87,43,0,258,259,3,79,39,0,259,260,3,87,
		43,0,260,90,1,0,0,0,261,264,5,39,0,0,262,265,3,95,47,0,263,265,8,2,0,0,
		264,262,1,0,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,267,5,39,0,0,267,92,
		1,0,0,0,268,273,5,34,0,0,269,272,3,95,47,0,270,272,8,3,0,0,271,269,1,0,
		0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
		276,1,0,0,0,275,273,1,0,0,0,276,277,5,34,0,0,277,94,1,0,0,0,278,279,5,
		92,0,0,279,280,7,4,0,0,280,96,1,0,0,0,281,282,5,47,0,0,282,283,5,47,0,
		0,283,287,1,0,0,0,284,286,8,5,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,
		285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,6,
		48,0,0,291,98,1,0,0,0,292,293,5,47,0,0,293,294,5,42,0,0,294,298,1,0,0,
		0,295,297,9,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,299,1,0,0,0,298,
		296,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,42,0,0,302,303,5,
		47,0,0,303,304,1,0,0,0,304,305,6,49,0,0,305,100,1,0,0,0,306,308,7,6,0,
		0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,
		311,1,0,0,0,311,312,6,50,0,0,312,102,1,0,0,0,11,0,240,242,250,255,264,
		271,273,287,298,309,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
