//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/playa/Desktop/Proyecto 2/Mini-C-Sharp/MiniCSharp/ANTLR4\MiniCSharpParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, USING=14, NULL=15, QMARK=16, PLUS=17, 
		MINUS=18, MULT=19, DIV=20, MOD=21, ASSIGN=22, LPAREN=23, RPAREN=24, LBRACE=25, 
		RBRACE=26, LBRACK=27, RBRACK=28, SEMICOLON=29, COMMA=30, INCREMENT=31, 
		DECREMENT=32, LOGICAL_OR=33, LOGICAL_AND=34, EQUALS=35, NOT_EQUALS=36, 
		GREATER_THAN=37, GREATER_EQUALS=38, LESS_THAN=39, LESS_EQUALS=40, DOT=41, 
		IDENTIFIER=42, NUMBER=43, DOUBLE_CONST=44, CHAR_CONSTANT=45, STRING_CONSTANT=46, 
		COMMENT=47, BLOCK_COMMENT=48, WHITESPACE=49;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relop", "addop", "mulop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'using'", 
		"'null'", "'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", "','", "'++'", "'--'", "'||'", "'&&'", 
		"'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "USING", "NULL", "QMARK", "PLUS", 
		"MINUS", "MULT", "DIV", "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", "INCREMENT", "DECREMENT", 
		"LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "GREATER_THAN", "GREATER_EQUALS", 
		"LESS_THAN", "LESS_EQUALS", "DOT", "IDENTIFIER", "NUMBER", "DOUBLE_CONST", 
		"CHAR_CONSTANT", "STRING_CONSTANT", "COMMENT", "BLOCK_COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramASTContext : ProgramContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramASTContext(ProgramContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 42;
				@using();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			Match(CLASS);
			State = 49;
			Match(IDENTIFIER);
			State = 50;
			Match(LBRACE);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046511110L) != 0) {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 51;
					varDecl();
					}
					break;
				case 2:
					{
					State = 52;
					classDecl();
					}
					break;
				case 3:
					{
					State = 53;
					methodDecl();
					}
					break;
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			Match(RBRACE);
			State = 60;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
	 
		public UsingContext() { }
		public virtual void CopyFrom(UsingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingASTContext : UsingContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public UsingASTContext(UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			_localctx = new UsingASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(USING);
			State = 63;
			Match(IDENTIFIER);
			State = 64;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclASTContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniCSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniCSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclASTContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			type();
			State = 67;
			Match(IDENTIFIER);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 68;
				Match(COMMA);
				State = 69;
				Match(IDENTIFIER);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclASTContext : ClassDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclASTContext(ClassDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(CLASS);
			State = 78;
			Match(IDENTIFIER);
			State = 79;
			Match(LBRACE);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 80;
				varDecl();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodDeclASTContext : MethodDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclASTContext(MethodDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethodDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 88;
				type();
				}
				break;
			case VOID:
				{
				State = 89;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 92;
			Match(IDENTIFIER);
			State = 93;
			Match(LPAREN);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 94;
				formPars();
				}
			}

			State = 97;
			Match(RPAREN);
			State = 98;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormParsASTContext : FormParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniCSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniCSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsASTContext(FormParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			_localctx = new FormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			type();
			State = 101;
			Match(IDENTIFIER);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 102;
				Match(COMMA);
				State = 103;
				type();
				State = 104;
				Match(IDENTIFIER);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeASTContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(MiniCSharpParser.QMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(MiniCSharpParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(MiniCSharpParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeASTContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			_localctx = new TypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(IDENTIFIER);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QMARK) {
				{
				State = 112;
				Match(QMARK);
				}
			}

			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN) {
				{
				State = 115;
				Match(LESS_THAN);
				State = 116;
				type();
				State = 117;
				Match(GREATER_THAN);
				}
			}

			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 121;
				Match(LBRACK);
				State = 122;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SemicolonStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public SemicolonStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public ReadStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public BreakStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniCSharpParser.NUMBER, 0); }
		public WriteStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCSharpParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCSharpParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new DesignatorStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				designator();
				State = 135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 126;
					Match(ASSIGN);
					State = 127;
					expr();
					}
					break;
				case LPAREN:
					{
					State = 128;
					Match(LPAREN);
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 136339450542080L) != 0) {
						{
						State = 129;
						actPars();
						}
					}

					State = 132;
					Match(RPAREN);
					}
					break;
				case INCREMENT:
					{
					State = 133;
					Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 134;
					Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137;
				Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(IF);
				State = 140;
				Match(LPAREN);
				State = 141;
				condition();
				State = 142;
				Match(RPAREN);
				State = 143;
				statement();
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 144;
					Match(ELSE);
					State = 145;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(FOR);
				State = 149;
				Match(LPAREN);
				State = 150;
				expr();
				State = 151;
				Match(SEMICOLON);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 136339450542080L) != 0) {
					{
					State = 152;
					condition();
					}
				}

				State = 155;
				Match(SEMICOLON);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398616938472L) != 0) {
					{
					State = 156;
					statement();
					}
				}

				State = 159;
				Match(RPAREN);
				State = 160;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				Match(WHILE);
				State = 163;
				Match(LPAREN);
				State = 164;
				condition();
				State = 165;
				Match(RPAREN);
				State = 166;
				statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				Match(BREAK);
				State = 169;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				Match(RETURN);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 136339450542080L) != 0) {
					{
					State = 171;
					expr();
					}
				}

				State = 174;
				Match(SEMICOLON);
				}
				break;
			case READ:
				_localctx = new ReadStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				Match(READ);
				State = 176;
				Match(LPAREN);
				State = 177;
				designator();
				State = 178;
				Match(RPAREN);
				State = 179;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 181;
				Match(WRITE);
				State = 182;
				Match(LPAREN);
				State = 183;
				expr();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 184;
					Match(COMMA);
					State = 185;
					Match(NUMBER);
					}
				}

				State = 188;
				Match(RPAREN);
				State = 189;
				Match(SEMICOLON);
				}
				break;
			case LBRACE:
				_localctx = new BlockStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 191;
				block();
				}
				break;
			case SEMICOLON:
				_localctx = new SemicolonStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockASTContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockASTContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			_localctx = new BlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(LBRACE);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398616938472L) != 0) {
				{
				State = 198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 196;
					varDecl();
					}
					break;
				case 2:
					{
					State = 197;
					statement();
					}
					break;
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActParsASTContext : ActParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsASTContext(ActParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			_localctx = new ActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			expr();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 206;
				Match(COMMA);
				State = 207;
				expr();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionASTContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(MiniCSharpParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(MiniCSharpParser.LOGICAL_OR, i);
		}
		public ConditionASTContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			condTerm();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 214;
				Match(LOGICAL_OR);
				State = 215;
				condTerm();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondTermASTContext : CondTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(MiniCSharpParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(MiniCSharpParser.LOGICAL_AND, i);
		}
		public CondTermASTContext(CondTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			_localctx = new CondTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			condFact();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 222;
				Match(LOGICAL_AND);
				State = 223;
				condFact();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactASTContext : CondFactContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactASTContext(CondFactContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			_localctx = new CondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			expr();
			State = 230;
			relop();
			State = 231;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	 
		public CastContext() { }
		public virtual void CopyFrom(CastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CastASTContext : CastContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public CastASTContext(CastContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			_localctx = new CastASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LPAREN);
			State = 234;
			type();
			State = 235;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprASTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprASTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			_localctx = new ExprASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 237;
				Match(MINUS);
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 240;
				cast();
				}
				break;
			}
			State = 243;
			term();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 244;
				addop();
				State = 245;
				term();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermASTContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermASTContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			_localctx = new TermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			factor();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0) {
				{
				{
				State = 253;
				mulop();
				State = 254;
				factor();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ExprFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		public BoolFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		public NewFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(MiniCSharpParser.NULL, 0); }
		public NullFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniCSharpParser.NUMBER, 0); }
		public NumberFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONSTANT() { return GetToken(MiniCSharpParser.STRING_CONSTANT, 0); }
		public StringFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_CONSTANT() { return GetToken(MiniCSharpParser.CHAR_CONSTANT, 0); }
		public CharFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CONST() { return GetToken(MiniCSharpParser.DOUBLE_CONST, 0); }
		public DoubleFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new DesignatorFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				designator();
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 262;
					Match(LPAREN);
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 136339450542080L) != 0) {
						{
						State = 263;
						actPars();
						}
					}

					State = 266;
					Match(RPAREN);
					}
				}

				}
				break;
			case NUMBER:
				_localctx = new NumberFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(NUMBER);
				}
				break;
			case CHAR_CONSTANT:
				_localctx = new CharFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 270;
				Match(CHAR_CONSTANT);
				}
				break;
			case STRING_CONSTANT:
				_localctx = new StringFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 271;
				Match(STRING_CONSTANT);
				}
				break;
			case DOUBLE_CONST:
				_localctx = new DoubleFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 272;
				Match(DOUBLE_CONST);
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BoolFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 273;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NEW:
				_localctx = new NewFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 274;
				Match(NEW);
				State = 275;
				Match(IDENTIFIER);
				}
				break;
			case LPAREN:
				_localctx = new ExprFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 276;
				Match(LPAREN);
				State = 277;
				expr();
				State = 278;
				Match(RPAREN);
				}
				break;
			case NULL:
				_localctx = new NullFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 280;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorASTContext : DesignatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniCSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniCSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorASTContext(DesignatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(IDENTIFIER);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 290;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 284;
					Match(DOT);
					State = 285;
					Match(IDENTIFIER);
					}
					break;
				case LBRACK:
					{
					State = 286;
					Match(LBRACK);
					State = 287;
					expr();
					State = 288;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniCSharpParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(MiniCSharpParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(MiniCSharpParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(MiniCSharpParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(MiniCSharpParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(MiniCSharpParser.LESS_EQUALS, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MiniCSharpParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSharpParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,49,302,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,5,0,44,
		8,0,10,0,12,0,47,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,55,8,0,10,0,12,0,58,9,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,2,74,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,82,8,3,10,3,12,3,85,9,3,1,3,1,3,1,4,1,
		4,3,4,91,8,4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,5,5,107,8,5,10,5,12,5,110,9,5,1,6,1,6,3,6,114,8,6,1,6,1,6,1,6,1,6,3,
		6,120,8,6,1,6,1,6,3,6,124,8,6,1,7,1,7,1,7,1,7,1,7,3,7,131,8,7,1,7,1,7,
		1,7,3,7,136,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,147,8,7,1,7,1,
		7,1,7,1,7,1,7,3,7,154,8,7,1,7,1,7,3,7,158,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,173,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,187,8,7,1,7,1,7,1,7,1,7,1,7,3,7,194,8,7,1,8,1,8,
		1,8,5,8,199,8,8,10,8,12,8,202,9,8,1,8,1,8,1,9,1,9,1,9,5,9,209,8,9,10,9,
		12,9,212,9,9,1,10,1,10,1,10,5,10,217,8,10,10,10,12,10,220,9,10,1,11,1,
		11,1,11,5,11,225,8,11,10,11,12,11,228,9,11,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,14,3,14,239,8,14,1,14,3,14,242,8,14,1,14,1,14,1,14,1,14,
		5,14,248,8,14,10,14,12,14,251,9,14,1,15,1,15,1,15,1,15,5,15,257,8,15,10,
		15,12,15,260,9,15,1,16,1,16,1,16,3,16,265,8,16,1,16,3,16,268,8,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,282,8,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,291,8,17,10,17,12,17,294,9,17,1,
		18,1,18,1,19,1,19,1,20,1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,0,4,1,0,12,13,1,0,35,40,1,0,17,18,1,0,19,21,
		331,0,45,1,0,0,0,2,62,1,0,0,0,4,66,1,0,0,0,6,77,1,0,0,0,8,90,1,0,0,0,10,
		100,1,0,0,0,12,111,1,0,0,0,14,193,1,0,0,0,16,195,1,0,0,0,18,205,1,0,0,
		0,20,213,1,0,0,0,22,221,1,0,0,0,24,229,1,0,0,0,26,233,1,0,0,0,28,238,1,
		0,0,0,30,252,1,0,0,0,32,281,1,0,0,0,34,283,1,0,0,0,36,295,1,0,0,0,38,297,
		1,0,0,0,40,299,1,0,0,0,42,44,3,2,1,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,
		1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,45,1,0,0,0,48,49,5,1,0,0,49,50,
		5,42,0,0,50,56,5,25,0,0,51,55,3,4,2,0,52,55,3,6,3,0,53,55,3,8,4,0,54,51,
		1,0,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,
		1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,60,5,26,0,0,60,61,5,0,0,1,61,1,
		1,0,0,0,62,63,5,14,0,0,63,64,5,42,0,0,64,65,5,29,0,0,65,3,1,0,0,0,66,67,
		3,12,6,0,67,72,5,42,0,0,68,69,5,30,0,0,69,71,5,42,0,0,70,68,1,0,0,0,71,
		74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,
		76,5,29,0,0,76,5,1,0,0,0,77,78,5,1,0,0,78,79,5,42,0,0,79,83,5,25,0,0,80,
		82,3,4,2,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,
		86,1,0,0,0,85,83,1,0,0,0,86,87,5,26,0,0,87,7,1,0,0,0,88,91,3,12,6,0,89,
		91,5,2,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,93,5,42,0,0,93,
		95,5,23,0,0,94,96,3,10,5,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,
		98,5,24,0,0,98,99,3,16,8,0,99,9,1,0,0,0,100,101,3,12,6,0,101,108,5,42,
		0,0,102,103,5,30,0,0,103,104,3,12,6,0,104,105,5,42,0,0,105,107,1,0,0,0,
		106,102,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,11,
		1,0,0,0,110,108,1,0,0,0,111,113,5,42,0,0,112,114,5,16,0,0,113,112,1,0,
		0,0,113,114,1,0,0,0,114,119,1,0,0,0,115,116,5,39,0,0,116,117,3,12,6,0,
		117,118,5,37,0,0,118,120,1,0,0,0,119,115,1,0,0,0,119,120,1,0,0,0,120,123,
		1,0,0,0,121,122,5,27,0,0,122,124,5,28,0,0,123,121,1,0,0,0,123,124,1,0,
		0,0,124,13,1,0,0,0,125,135,3,34,17,0,126,127,5,22,0,0,127,136,3,28,14,
		0,128,130,5,23,0,0,129,131,3,18,9,0,130,129,1,0,0,0,130,131,1,0,0,0,131,
		132,1,0,0,0,132,136,5,24,0,0,133,136,5,31,0,0,134,136,5,32,0,0,135,126,
		1,0,0,0,135,128,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,137,1,0,0,
		0,137,138,5,29,0,0,138,194,1,0,0,0,139,140,5,3,0,0,140,141,5,23,0,0,141,
		142,3,20,10,0,142,143,5,24,0,0,143,146,3,14,7,0,144,145,5,4,0,0,145,147,
		3,14,7,0,146,144,1,0,0,0,146,147,1,0,0,0,147,194,1,0,0,0,148,149,5,5,0,
		0,149,150,5,23,0,0,150,151,3,28,14,0,151,153,5,29,0,0,152,154,3,20,10,
		0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,157,5,29,0,0,156,
		158,3,14,7,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,5,
		24,0,0,160,161,3,14,7,0,161,194,1,0,0,0,162,163,5,6,0,0,163,164,5,23,0,
		0,164,165,3,20,10,0,165,166,5,24,0,0,166,167,3,14,7,0,167,194,1,0,0,0,
		168,169,5,7,0,0,169,194,5,29,0,0,170,172,5,8,0,0,171,173,3,28,14,0,172,
		171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,194,5,29,0,0,175,176,5,
		9,0,0,176,177,5,23,0,0,177,178,3,34,17,0,178,179,5,24,0,0,179,180,5,29,
		0,0,180,194,1,0,0,0,181,182,5,10,0,0,182,183,5,23,0,0,183,186,3,28,14,
		0,184,185,5,30,0,0,185,187,5,43,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
		188,1,0,0,0,188,189,5,24,0,0,189,190,5,29,0,0,190,194,1,0,0,0,191,194,
		3,16,8,0,192,194,5,29,0,0,193,125,1,0,0,0,193,139,1,0,0,0,193,148,1,0,
		0,0,193,162,1,0,0,0,193,168,1,0,0,0,193,170,1,0,0,0,193,175,1,0,0,0,193,
		181,1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,15,1,0,0,0,195,200,5,25,
		0,0,196,199,3,4,2,0,197,199,3,14,7,0,198,196,1,0,0,0,198,197,1,0,0,0,199,
		202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,
		0,0,0,203,204,5,26,0,0,204,17,1,0,0,0,205,210,3,28,14,0,206,207,5,30,0,
		0,207,209,3,28,14,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,
		211,1,0,0,0,211,19,1,0,0,0,212,210,1,0,0,0,213,218,3,22,11,0,214,215,5,
		33,0,0,215,217,3,22,11,0,216,214,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,
		0,218,219,1,0,0,0,219,21,1,0,0,0,220,218,1,0,0,0,221,226,3,24,12,0,222,
		223,5,34,0,0,223,225,3,24,12,0,224,222,1,0,0,0,225,228,1,0,0,0,226,224,
		1,0,0,0,226,227,1,0,0,0,227,23,1,0,0,0,228,226,1,0,0,0,229,230,3,28,14,
		0,230,231,3,36,18,0,231,232,3,28,14,0,232,25,1,0,0,0,233,234,5,23,0,0,
		234,235,3,12,6,0,235,236,5,24,0,0,236,27,1,0,0,0,237,239,5,18,0,0,238,
		237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,242,3,26,13,0,241,240,
		1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,249,3,30,15,0,244,245,3,38,
		19,0,245,246,3,30,15,0,246,248,1,0,0,0,247,244,1,0,0,0,248,251,1,0,0,0,
		249,247,1,0,0,0,249,250,1,0,0,0,250,29,1,0,0,0,251,249,1,0,0,0,252,258,
		3,32,16,0,253,254,3,40,20,0,254,255,3,32,16,0,255,257,1,0,0,0,256,253,
		1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,31,1,0,0,0,
		260,258,1,0,0,0,261,267,3,34,17,0,262,264,5,23,0,0,263,265,3,18,9,0,264,
		263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,268,5,24,0,0,267,262,1,
		0,0,0,267,268,1,0,0,0,268,282,1,0,0,0,269,282,5,43,0,0,270,282,5,45,0,
		0,271,282,5,46,0,0,272,282,5,44,0,0,273,282,7,0,0,0,274,275,5,11,0,0,275,
		282,5,42,0,0,276,277,5,23,0,0,277,278,3,28,14,0,278,279,5,24,0,0,279,282,
		1,0,0,0,280,282,5,15,0,0,281,261,1,0,0,0,281,269,1,0,0,0,281,270,1,0,0,
		0,281,271,1,0,0,0,281,272,1,0,0,0,281,273,1,0,0,0,281,274,1,0,0,0,281,
		276,1,0,0,0,281,280,1,0,0,0,282,33,1,0,0,0,283,292,5,42,0,0,284,285,5,
		41,0,0,285,291,5,42,0,0,286,287,5,27,0,0,287,288,3,28,14,0,288,289,5,28,
		0,0,289,291,1,0,0,0,290,284,1,0,0,0,290,286,1,0,0,0,291,294,1,0,0,0,292,
		290,1,0,0,0,292,293,1,0,0,0,293,35,1,0,0,0,294,292,1,0,0,0,295,296,7,1,
		0,0,296,37,1,0,0,0,297,298,7,2,0,0,298,39,1,0,0,0,299,300,7,3,0,0,300,
		41,1,0,0,0,33,45,54,56,72,83,90,95,108,113,119,123,130,135,146,153,157,
		172,186,193,198,200,210,218,226,238,241,249,258,264,267,281,290,292
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
